name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pages: write # Added for GitHub Pages deployment
  id-token: write # Added for GitHub Pages deployment (OIDC)

jobs:
  build:
    name: Build and Test for All Platforms
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: [1.23.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install dependencies
        run: go mod download
      - name: Run tests
        run: go test ./... -v
      - name: Build binary
        env:
          GOOS: ${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'windows-latest' && 'windows' || 'darwin' }}
          GOARCH: ${{ matrix.arch }}
        run: |
          go build -o bin/mock-my-mta-${{ matrix.os }}-${{ matrix.arch }} ./cmd/server/
      - name: Upload binary
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: mock-my-mta-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/mock-my-mta-${{ matrix.os }}-${{ matrix.arch }}
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    permissions: # Job-level permissions for GitHub Pages
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x' # Or match the version used in the build job
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Or a suitable LTS version like 18.x
      - name: Install project dependencies
        run: npm install
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Start application server
        run: |
          go run ./cmd/server/ --init-with-test-data e2e/testdata/emails &
          sleep 5 # Wait for the server to start
      - name: Run Playwright tests
        id: run-tests # Added id for this step
        run: npx playwright test e2e/

      - name: Upload Playwright report
        if: always() # This step runs regardless of test success/failure
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
      - name: Deploy to GitHub Pages
        if: success() # This step only runs if tests (and previous steps) were successful
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: playwright-report # The folder the action should deploy.
  release:
    name: Create Release and Upload Assets
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        go-version: [1.23.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: mock-my-mta-${{ matrix.os }}-${{ matrix.arch }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'latest'
          name: 'Latest Build'
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        run: |
          gh release upload latest "${{ github.workspace }}/mock-my-mta-${{ matrix.os }}-${{ matrix.arch }}" --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  test_coverage:
    name: Run Test Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21.x

      - name: Install dependencies
        run: go mod download

      - name: Run tests and generate coverage report
        run: |
          go test ./... -v -coverprofile=coverage.out
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage.html
